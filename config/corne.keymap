#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


&mt {
    tapping-term-ms = <400>;
    retro-tap;
    flavor = "tap-prefered";
};

/ {
        combos {
            compatible = "zmk,combos";
            combo_esc {
                timeout-ms = <50>;
                key-positions = <0 1 2>;
                bindings = <&bt BT_CLR>;
            };
        };
        
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//                    | ALT | LWR | ENT |   | RSE | SPC  | GUI |
                        bindings = <
   &mt TAB Q  &kp W      &kp E       &kp R        &kp T        &kp Y  &kp U       &kp I       &kp O        &mt ESC P    
   &mt LGUI A &mt LALT S &mt LCTRL D &mt LSHFT F  &kp G        &kp H  &mt LSHFT J &mt LCTRL K &mt LALT L   &mt LGUI SEMI
   &kp Z      &kp X      &kp C       &kp V        &kp B        &kp N  &kp M       &kp COMMA   &kp DOT      &kp FSLH 
                                  &mo 3  &mo 1  &kp RET        &mo 2  &kp SPACE   &kp BSPC
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//                    | ALT | LWR | ENT |   | RSE | SPC  | GUI |
                        bindings = <
   &kp F9  &kp F10 &kp F11 &kp F12 &kp LC(C)          &none &kp N7  &kp N8  &kp N9 &kp DEL 
   &kp F5  &kp F6  &kp F7  &kp F8  &kp LC(V)          &none &kp N4  &kp N5  &kp N6 &kp PSCRN
   &kp F1  &kp F2  &kp F3  &kp F4  &kp LG(LS(A))      &none &kp N1  &kp N2  &kp N3 &none 
                     &none  &none  &kp RET            &none &kp N0  &kp BSPC
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//                    | ALT | LWR | ENT |   | RSE | SPC  | GUI |
                        bindings = <
   &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT        &kp CARET &kp AMPS  &kp STAR &kp LPAR &kp RPAR   
   &none    &none  &none    &none    &kp GRAVE        &kp MINUS &kp EQUAL &kp PIPE &kp LBRC &kp RBRC
   &none    &none  &none    &none    &kp TILDE        &kp UNDER &kp PLUS  &kp BSLH &kp LBKT &kp RBKT
           &none  &none  &kp RET        &none  &kp SPACE  &kp FSLH
                        >;
                };

                nav_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//                    | ALT | LWR | ENT |   | RSE | SPC  | GUI |
                        bindings = <
   &none         &none        &none        &none        &none                &none     &kp LG(LC(LEFT))  &kp UP        &kp LG(LC(RIGHT)) &none  
   &none         &none        &none        &out OUT_USB &out OUT_BLE         &none     &kp LEFT          &kp DOWN      &kp RIGHT         &none
   &bt BT_SEL 0  &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4         &kp C_PP  &kp C_VOL_DN      &kp C_VOL_UP  &kp C_MUTE        &none
                                               &none  &none  &kp RET         &none  &kp SPACE  &kp FSLH
                        >;
                };
        };
};

